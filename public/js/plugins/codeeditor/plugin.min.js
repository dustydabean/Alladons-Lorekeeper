/**
 * @copyright Â©Melqui Brito. All rights reserved.
 * @author Melqui Brito
 * @version 1.0.0 (2020-03-24)
 * @description Tinymce custom advanced plugin for source code editing.
 * https://github.com/melquibrito/source-code-editor-tinymce-plugin/tree/master/codeeditor
 */

var aceEditor, tryToBuildAceTimer;
function displayToxEditorModal(e = !0) {
    let o = document.getElementById("tox-codeeditor-wrap");
    e
        ? ((o.style.display = "flex"),
          o.focus(),
          document.body.classList.add("tox-codeeditor__disable-scroll"))
        : ((o.style.display = "none"),
          document.body.classList.remove("tox-codeeditor__disable-scroll"),
          tinymce.activeEditor.focus());
}
function saveContent(e) {
    e.tinymce.undoManager.transact(function () {
        e.tinymce.setContent(e.aceEditor.getValue());
    }),
        // e.selection.setCursorLocation(),
        e.tinymce.nodeChanged();
}

function showtinymce(e) {
    const root = e.currentTarget.parentElement.parentElement;
    saveContent(root);
    root.querySelector(".tox").classList.remove("hide");
    root.querySelector("#ace-code-editor-wrapper").classList.add("hide");
}

function applyTheme(e) {
    aceEditor.setTheme(e.options[e.selectedIndex].value);
}
!(function () {
    "use strict";
    let e = (function () {
            let e = tinymce.activeEditor.getParam("codeeditor_themes_pack");
            return "string" == typeof e
                ? e.trim().replace(/(\s+)/g, "?").split("?")
                : Array.isArray(e)
                ? e
                : ["twilight", "merbivore", "dawn", "kuroir"];
        })(),
        o = (function () {
            let e = tinymce.activeEditor.getParam("codeeditor_font_size");
            return "number" == typeof e ? parseInt(e) : 12;
        })(),
        t = (function () {
            let e = tinymce.activeEditor.getParam("codeeditor_wrap_mode");
            return "boolean" != typeof e || e;
        })();
    let r = document.createElement("script");
    (r.src = "https://cdnjs.cloudflare.com/ajax/libs/ace/1.13.1/ace.js"),
        (r.type = "text/javascript"),
        (r.charset = "utf-8"),
        document.body.appendChild(r);
    let d = document.createElement("script");
    (d.src =
        "https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.10.3/beautify.min.js"),
        (d.type = "text/javascript"),
        document.body.appendChild(d);
    let a = document.createElement("script");
    (a.src =
        "https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.10.3/beautify-css.min.js"),
        (a.type = "text/javascript"),
        document.body.appendChild(a);
    let c = document.createElement("script");
    (c.src =
        "https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.10.3/beautify-html.min.js"),
        (c.type = "text/javascript"),
        document.body.appendChild(c),
        tinymce.PluginManager.add("codeeditor", function (e) {
            setTimeout(() => {
                const root = e.editorContainer.parentElement;
                const id = e.id;

                $(e.editorContainer).after(
                    $(`<div id="ace-code-editor-wrapper" class="hide" style="border: 1px solid lightgrey; border-radius: 2px; height: fit-content;">
                        <button onclick="showtinymce(event)" type="button" class="btn btn-sm editor-btn py-0 px-1 m-1" data-toggle="tooltip" title="switch back to wysiwig editor"><i class="fas fa-paragraph"></i></button>
                        <div id="${id}-ace-code-editor" style="height: 300px; resize:vertical;"></div>
                    </div>`)
                );
                (aceEditor = ace.edit(`${id}-ace-code-editor`)).setTheme(
                    "ace/theme/chrome"
                );
                root.aceEditor = aceEditor;
                root.tinymce = tinymce.get(id);
                aceEditor.setFontSize(o),
                aceEditor.setOption("showPrintMargin", false);

                let observer = new ResizeObserver(function(mutations) {
                    aceEditor.resize();
                });
                  
                let child = root.querySelector("#ace-code-editor-wrapper");
                observer.observe(child, { attributes: true });

            }, 500);

            return (
                e.ui.registry.addButton("codeeditor", {
                    icon: "sourcecode",
                    tooltip: "Code Editor",
                    onAction: function () {
                        const root = e.editorContainer.parentElement;
                        root.querySelector(".tox").classList.add("hide");
                        root
                            .querySelector("#ace-code-editor-wrapper")
                            .classList.remove("hide");
                        $(root.querySelector("#ace-code-editor-wrapper"))
                            .find("[data-toggle=tooltip]")
                            .tooltip({ html: true });

                        let o = html_beautify(
                                e.dom.decode(e.getContent({ source_view: !0 }))
                        );

                        let n = ace.createEditSession(o, "ace/mode/html");
                        n.setUseWrapMode(t), root.aceEditor.setSession(n);
                        var session = root.aceEditor.getSession();
                        session.on("changeAnnotation", function () {
                            var annotations = session.getAnnotations() || [];
                            let len = annotations.length;
                            let i = len;
                            while (i--) {
                                if (
                                    /doctype first\. Expected/.test(
                                        annotations[i].text
                                    )
                                ) {
                                    annotations.splice(i, 1);
                                } else if (
                                    /Unexpected End of file\. Expected/.test(
                                        annotations[i].text
                                    )
                                ) {
                                    annotations.splice(i, 1);
                                }
                            }
                            if (len > annotations.length) {
                                session.setAnnotations(annotations);
                            }
                            saveContent(e.editorContainer.parentElement);
                        });
                    },
                }),
                {
                    getMetadata: function () {
                        return {
                            name: "CodeEditor",
                            url: "https://github.com/melquibrito/Source-code-editor-tinymce-plugin",
                        };
                    },
                }
            );
        });
})();
